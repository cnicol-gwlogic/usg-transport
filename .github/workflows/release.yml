name: USG-Transport release
on:
  # workflow_call event lets this workflow be called either
  # from this repo or the nightly build repo for dev builds
  workflow_call:
    inputs:
      approve:
        description: 'Approve the release, modifying disclaimer language to indicate the distribution has been reviewed. If false, disclaimers & version strings indicate preliminary/provisional status.'
        required: false
        type: boolean
        default: false
      branch:
        description: 'Branch to release from.'
        required: true
        type: string
      developmode:
        description: 'Build binaries in develop mode. If false, IDEVELOPMODE is set to 0.'
        required: false
        type: boolean
        default: true
      full:
        description: 'Build a full distribution containing sources, examples, and all documentation. If false, the distribution contains only binaries, mf6io, release notes, and code.json.'
        required: false
        type: boolean
        default: false
      linux_version:
        description: 'Linux runner image to build binaries on.'
        required: false
        type: string
        default: 'ubuntu-20.04'
      run_tests:
        description: Run tests after building binaries.'
        required: false
        type: boolean
        default: false
      version:
        description: 'Version number to use for release.'
        required: true
        type: string
    outputs:
      version:
        description: 'Version number used for release'
        value: ${{ jobs.build.outputs.version }}
      distname:
        description: 'Distribution name used for release'
        value: ${{ jobs.build.outputs.distname }}
env:
  FC: ifort
jobs:
  build:
    name: Build binaries (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ${{ inputs.linux_version }}
            ostag: linux
          - os: macos-12
            ostag: mac
          - os: windows-2022
            ostag: win64
    defaults:
      run:
        shell: bash -l {0}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      distname: ${{ steps.set_version.outputs.distname }}
    steps:
      - name: Checkout usg-transport
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/usg-transport
          path: usg-transport
          ref: ${{ inputs.branch }}

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: usg-transport/environment.yml
          cache-downloads: true
          cache-environment: true
          init-shell: >-
            bash
            powershell

      - name: Setup Intel Fortran
        uses: modflowpy/install-intelfortran-action@v1

      - name: Set version number
        id: set_version
        run: |
          # distribution name format is 'usg-transport-<major.minor.patch[label]>'
          distname="usg-transport-${{ inputs.version }}"

          # set step outputs and environment variables
          echo "version=${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          echo "VERSION=${{ inputs.version }}" >> "$GITHUB_ENV"
          echo "distname=$distname" >> "$GITHUB_OUTPUT"
          echo "DISTNAME=$distname" >> "$GITHUB_ENV"

      - name: Update version
        id: update_version
        working-directory: usg-transport/distribution
        run: |
          ver="${{ steps.set_version.outputs.version }}"
          cmd="python update_version.py -v $ver"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approve"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            cmd="$cmd --releasemode"
          fi
          eval "$cmd"

      - name: Build binaries
        if: runner.os != 'Windows'
        working-directory: usg-transport
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Build binaries (Windows)
        if: runner.os == 'Windows'
        working-directory: usg-transport
        shell: pwsh
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: bin-${{ runner.os }}
          path: usg-transport/bin

      # only run steps below if inputs.run_tests is true
      #- name: Checkout usg-transport-testmodels
      #  if: inputs.run_tests == true
      #  uses: actions/checkout@v3
      #  with:
      #    repository: cnicol-gwlogic/usg-transport-testmodels
      #    path: usg-transport-testmodels

      #- name: Checkout usg-transport-examples
      #  if: inputs.run_tests == true
      #  uses: actions/checkout@v3
      #  with:
      #    repository: cnicol-gwlogic/usg-transport-examples
      #    path: usg-transport-examples

      #- name: Get executables
      #  if: inputs.run_tests == true
      #  working-directory: usg-transport/autotest
      #  env:
      #    GITHUB_TOKEN: ${{ github.token }}
      #  run: pytest -v --durations 0 get_exes.py

      #- name: Test usg-transport
      #  if: inputs.run_tests == true && runner.os != 'Windows'
      #  working-directory: usg-transport/autotest
      #  env:
      #    REPOS_PATH: ${{ github.workspace }}
      #  run: |
      #    markers="not large"
      #    if [[ "${{ inputs.developmode }}" == "false" ]]; then
      #      markers="$markers and not developmode"
      #    fi
      #    pytest -v -n auto --durations 0 -m "$markers"
      
      #- name: Test usg-transport (Windows)
      #  if: inputs.run_tests == true && runner.os == 'Windows'
      #  working-directory: usg-transport/autotest
      #  shell: pwsh
      #  env:
      #    REPOS_PATH: ${{ github.workspace }}
      #  run: |
      #    $markers="not large"
      #    if ("${{ inputs.developmode }}" -eq "false") {
      #      $markers="$markers and not developmode"
      #    }
      #    pytest -v -n auto --durations 0 -m "$markers"
      
      #- name: Test distribution scripts
      #  if: ${{ inputs.run_tests == true }}
      #  working-directory: usg-transport/distribution
      #  env:
      #    GITHUB_TOKEN: ${{ github.token }}
      #  run: pytest -v --durations 0
          
  dist:
    name: Build distribution (${{ matrix.os }})
    needs:
      - build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            ostag: linux
          - os: macos-12
            ostag: mac
          - os: windows-2022
            ostag: win64
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout usg-transport
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/usg-transport
          path: usg-transport
          ref: ${{ inputs.branch }}

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: usg-transport/environment.yml
          cache-downloads: true
          cache-environment: true
          init-shell: >-
            bash
            powershell

      - name: Setup Intel Fortran
        uses: modflowpy/install-intelfortran-action@v1
      
      - name: Update version
        id: update_version
        working-directory: usg-transport/distribution
        run: |
          ver="${{ needs.build.outputs.version }}"
          cmd="python update_version.py -v $ver"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approve"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            cmd="$cmd --releasemode"
          fi
          eval "$cmd"

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ needs.build.outputs.distname }}_${{ matrix.ostag }}
      
      - name: Select artifacts
        working-directory: ${{ needs.build.outputs.distname }}_${{ matrix.ostag }}
        run: |
          echo "selecting ${{ matrix.ostag }} artifacts"
          # remove dists for other systems
          rm -rf ${{ needs.build.outputs.distname }}_*
          # remove release notes
          rm -rf release_notes
          # rename dist bin directory
          mv bin-${{ runner.os }} bin
          # remove binaries for other systems
          rm -rf bin-*

          echo "dist directory contains:"
          ls
      
      - name: Build distribution
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # build distribution
          distname="${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          cmd="python usg-transport/distribution/build_dist.py -o $distname -e usg-transport-examples"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            cmd="$cmd --full"
          fi
          eval "$cmd"

      - name: Zip distribution
        if: runner.os != 'Windows'
        run: |
          distname="${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            zip -r $distname.zip \
              $distname/bin \
              $distname/src \
              $distname/make \
              $distname/msvs \
              $distname/code.json \
              $distname/meson.build \
              -x '*.DS_Store' \
              -x '*pymake*' \
              -x '*obj_temp*' \
              -x '*mod_temp*'
          else
            zip -r $distname.zip \
              $distname/bin/* \
              $distname/code.json \
              -x '*.DS_Store' \
              -x '*pymake*' \
              -x '*obj_temp*' \
              -x '*mod_temp*'
          fi

      - name: Zip distribution (Windows)
        if: runner.os == 'Windows'
        run: |
          distname="${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            7z a -tzip $distname.zip \
              $distname/bin \
              $distname/src \
              $distname/make \
              $distname/msvs \
              $distname/code.json \
              $distname/meson.build \
              -xr!pymake \
              -xr!obj_temp \
              -xr!mod_temp
          else
            7z a -tzip $distname.zip \
              $distname/bin/* \
              $distname/code.json \
              -xr!pymake \
              -xr!obj_temp \
              -xr!mod_temp
          fi

      # validate only after zipping distribution to avoid accidentally changing any files
      - name: Validate distribution
        run: |
          cmd="pytest -v -s usg-transport/distribution/check_dist.py --path ${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approved"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
             cmd="$cmd --releasemode"
          fi
          if [[ "${{ inputs.full }}" == "true" ]]; then
            cmd="$cmd --full"
          fi
          eval "$cmd"

      - name: Upload distribution
        uses: actions/upload-artifact@v3
        with:
          name: "${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          path: "${{ needs.build.outputs.distname }}_${{ matrix.ostag }}.zip"
